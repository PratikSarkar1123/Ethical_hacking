---

# 🔐 Adobe Network Pentesting – 25 June 2025

---

## ------------------------- 🎯 Objective -------------------------

To perform **network penetration testing** on 40 internal employee machines.

✅ Provided:

* A list of internal IPs.
* Access to Kali Linux machine.
* Permission for internal testing.

🧪 Goal:

* Identify and report vulnerabilities using **Nmap** and **OpenVAS**.
* Mitigate any critical issues found.

---

## ------------------------- 🛠 Tools Used -------------------------

* **Nmap** → For service discovery & initial vulnerability scanning.
* **OpenVAS (Greenbone)** → Deep scan for CVEs & reporting.

---

## ------------------- 📁 Nmap Scanning (Initial) -------------------

### 🔧 Command Used:

```bash
nmap -sV --script=vuln -iL targets.txt -oN vuln_report.txt
```

### 🔍 Breakdown:

* `-sV` → Service version detection
* `--script=vuln` → NSE scripts for common vulnerabilities
* `-iL` → Read list of IPs from `targets.txt`
* `-oN` → Save output to `vuln_report.txt` in readable format

### ✅ Result:

* Detected SSH, FTP, HTTP, SMB services.
* Identified weak configurations and potential CVEs.
* Output used as base input for OpenVAS scan.

---

## ---------------------- 🛡️ OpenVAS Scanning ----------------------

### ❓ What is OpenVAS?

> OpenVAS is an open-source vulnerability scanner by Greenbone. It detects misconfigurations, missing patches, and known CVEs using updated feeds.

---

### ⚙️ Installation Steps (on Kali Linux):

```bash
# Update & Upgrade
sudo apt update && sudo apt upgrade -y

# Install OpenVAS
sudo apt install openvas -y

# Setup (auto-feeds, certs, configs)
sudo gvm-setup

# Start Services
sudo gvm-start

# Verify Setup
sudo gvm-check-setup
```

⚠️ *During setup, username and password will be displayed for web login*

---

## --------------------- 🌐 Web Access & Usage ----------------------

### 🧭 Access OpenVAS Web UI:

* Open browser → `https://localhost:9392`
* Login with creds generated during `gvm-setup`

---

## ---------------- 🔄 Updating Vulnerability Feeds -----------------

To sync the latest CVE databases and detection rules:

```bash
sudo greenbone-feed-sync --type GVMD_DATA
sudo greenbone-feed-sync --type SCAP
sudo greenbone-feed-sync --type CERT
```

---

## --------------------- 📑 Scan Configuration ----------------------

### Steps:

1. Created a **CSV** of all 40 IPs
2. Imported as **Target List** in OpenVAS
3. Created scan config with **Full and Fast Ultimate**
4. Launched scan from dashboard
5. Exported reports in **PDF**, **HTML**, and **XML**

---

## --------------------- 🧾 Scan Results Summary ----------------------

OpenVAS reported:

* Detected OS and Services
* List of vulnerabilities per host
* Severity breakdown: Low / Medium / High / Critical
* CVSS v3 scores
* CVEs + Exploit References
* Recommended Mitigations

---

## -------------------- 🚨 Critical Vulnerability ---------------------

### 🔴 Command Injection in IoT Device

* **Device:** Smartwatch connected via internal WiFi
* **Severity:** Critical
* **CVSS:** 9.8
* **CVE:** Found in OpenVAS report
* **Fix:** Firmware update via vendor patch

---

## ------------------------ ✅ Summary Tasks ------------------------

✅ Activities Done:

* Verified all 40 IPs were reachable.
* Ran **Nmap** with NSE vuln scripts.
* Installed and configured **OpenVAS**.
* Synced latest feed data.
* Executed custom scan.
* Analyzed reports.
* Found and reported **critical** CVE.

---

## --------------------- 📁 Repository Structure ----------------------

```plaintext
📦 Adobe-Network-Pentest/
├── README.md               # Full documentation
├── targets.txt             # List of scanned IPs
├── vuln_report.txt         # Nmap scan result
├── openvas_report.pdf      # Full OpenVAS report
└── screenshots/            # Screenshots from scan dashboard
```

---

## ------------------------ ⚠️ Disclaimer ------------------------

This pentest was conducted with **explicit authorization**. All scanned systems were internal assets, and testing adhered to organizational guidelines.

---
