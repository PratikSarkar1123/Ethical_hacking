

````markdown
# 🔐 Adobe Network Pentesting – 25 June 2025

## 📌 Objective

The goal was to perform **network penetration testing** on 40 employee machines. I was provided with a list of IP addresses and asked to identify vulnerabilities using **Nmap** and **OpenVAS**, then report and mitigate any critical issues found.

---

## 🛠️ Tools Used

- **Nmap** – for network scanning and initial vulnerability discovery.
- **OpenVAS (Greenbone Vulnerability Manager)** – for deep vulnerability scanning, CVE lookup, and reporting.

---

## 📁 Nmap Scanning on List of IP Addresses

### 🔧 Command Used:

```bash
nmap -sV --script=vuln -iL targets.txt -oN vuln_report.txt
````

### 📖 Explanation:

* `-sV` → Enables version detection of running services.
* `--script=vuln` → Runs all vulnerability detection scripts from Nmap's NSE (Nmap Scripting Engine).
* `-iL targets.txt` → Reads list of target IPs from `targets.txt`.
* `-oN vuln_report.txt` → Saves the output in normal (readable) format to `vuln_report.txt`.

### ✅ Outcome:

* Several services were identified such as SSH, HTTP, SMB, and FTP.
* Potential vulnerabilities were flagged.
* This output was saved and reviewed for follow-up using OpenVAS for deeper analysis.

---

## 🛡️ OpenVAS Vulnerability Scanning

### ❓ What is OpenVAS?

**OpenVAS (Open Vulnerability Assessment System)** is an open-source vulnerability scanner developed by Greenbone. It performs comprehensive checks for known vulnerabilities and misconfigurations.

### 📋 Features:

* Detects missing patches, weak configurations, and software flaws.
* Uses updated feeds of CVEs and threat data.
* Rates issues by severity using CVSS (Common Vulnerability Scoring System).
* Provides remediation advice and links to vendor patches.

---

## ⚙️ Installing OpenVAS on Kali Linux

### 📌 Step-by-step Installation and Setup

```bash
# Step 1: Update the system
sudo apt update && sudo apt upgrade -y

# Step 2: Install OpenVAS
sudo apt install openvas -y

# Step 3: Set up OpenVAS and initialize feeds
sudo gvm-setup
```

> ⚠️ During setup, you will be given a username and password to access the web interface.

```bash
# Step 4: Start OpenVAS services
sudo gvm-start

# Step 5: Verify if everything is running properly
sudo gvm-check-setup
```

---

## 🌐 Accessing OpenVAS Web Interface

* Open browser and navigate to: `https://localhost:9392`
* Log in using the credentials provided during `gvm-setup`

---

## 📡 Updating Vulnerability Feeds

To ensure latest CVEs and detection rules are available, update feeds:

```bash
sudo greenbone-feed-sync --type GVMD_DATA
sudo greenbone-feed-sync --type SCAP
sudo greenbone-feed-sync --type CERT
```

These updates enable custom scanning configurations and improve detection accuracy.

---

## 🎯 Creating and Scanning Target List in OpenVAS

### 🔧 Steps Followed:

1. Created a `CSV` file containing the list of all 40 employee IP addresses.
2. Imported the file as a **Target List** in OpenVAS.
3. Created a **Custom Scan Configuration** based on **Full and Fast Ultimate** scan profile.
4. Launched the scan from the OpenVAS dashboard.
5. Waited for scan to complete and downloaded the results in **HTML, PDF**, and **XML** formats.

---

## 📑 Results and Reporting

OpenVAS generated detailed vulnerability reports that included:

* Service and OS detection
* List of vulnerabilities found per host
* Severity ratings (Low, Medium, High, Critical)
* CVSS scores
* CVE identifiers
* Mitigation advice (e.g. patching software, updating firmware)

---

## 🚨 Critical Finding

### 🔴 High Severity Vulnerability Identified:

* **Type:** Command Injection
* **Device:** Smart Watch connected to internal Wi-Fi
* **CVSS Score:** 9.8 (Critical)
* **CVE:** Referenced in OpenVAS scan results
* **Mitigation:** Update the device to the latest firmware version provided by the manufacturer.

---

## ✅ Summary of Tasks Performed

* Collected and validated IP addresses of 40 employees.
* Ran **Nmap** scan to detect services and check for quick vulnerability signatures.
* Installed and configured **OpenVAS** locally on Kali Linux.
* Updated all vulnerability feeds.
* Ran **custom full scan** and analyzed results.
* Generated reports in multiple formats.
* Identified and documented one **critical vulnerability**.
* Suggested mitigation based on vendor recommendation.

---

## 📁 Repository Structure

```plaintext
📦 Adobe-Network-Pentest/
├── README.md               # Full documentation
├── targets.txt             # List of scanned IPs (sanitized)
├── vuln_report.txt         # Nmap output
├── openvas_report.pdf      # OpenVAS full report (optional)
└── screenshots/            # Optional screenshots from web interface
```

---

## ⚠️ Disclaimer

All testing was performed with **explicit permission** on internal systems. This assessment was conducted for **authorized security evaluation purposes only**.

---

## 📬 Contact

For any clarification or questions, please open an issue or contact the project maintainer.

```

---

### ✅ How to Use This

1. Create a new GitHub repo.
2. Add this `README.md` file.
3. Add your other files (`targets.txt`, `vuln_report.txt`, etc.)
4. Push it to GitHub.

Let me know if you want help generating a `.gitignore` or want dummy files for upload!
```
